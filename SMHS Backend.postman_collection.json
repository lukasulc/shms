{
	"info": {
		"_postman_id": "0285a6fa-842e-4c7c-bce1-94f599f6f248",
		"name": "SMHS Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40206436"
	},
	"item": [
		{
			"name": "Light",
			"item": [
				{
					"name": "Light By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Validate the response array structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number');",
									"        pm.expect(item.name).to.exist.and.to.be.a('string');",
									"        pm.expect(item.state).to.exist.and.to.be.a('boolean');",
									"        pm.expect(item.brightness).to.exist.and.to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"pm.test(\"State is a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.state).to.be.a('boolean');",
									"    });",
									"});",
									"",
									"pm.test(\"Brightness is an integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.brightness).to.be.a('number').and.to.satisfy(Number.isInteger, \"Brightness should be an integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"State should be either true or false\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(light) {",
									"    pm.expect(light.state).to.be.oneOf([true, false]);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/light?name=Bedroom light",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"light"
							],
							"query": [
								{
									"key": "name",
									"value": "Bedroom light"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Light By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('state');",
									"    pm.expect(responseData).to.have.property('brightness');",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.state).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Brightness is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.brightness).to.be.a('number');",
									"    pm.expect(responseData.brightness).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/light/1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"light",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Light Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, name, state, and brightness fields exist in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.name).to.exist;",
									"    pm.expect(responseData.state).to.exist;",
									"    pm.expect(responseData.brightness).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.state).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Brightness is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.brightness).to.be.a('number');",
									"  pm.expect(responseData.brightness).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Kitchen light\",\r\n    \"state\":true,\r\n    \"brightness\":50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/light/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"light",
								"add"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom light",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Light Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, name, state, and brightness fields must exist in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('name');",
									"  pm.expect(responseData).to.have.property('state');",
									"  pm.expect(responseData).to.have.property('brightness');",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.state).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Brightness is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.brightness).to.be.a('number');",
									"    pm.expect(responseData.brightness).to.satisfy((value) => value >= 0, \"Brightness must be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1000,\r\n    \"name\":\"Porch light\",\r\n    \"state\":true,\r\n    \"brightness\":20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/light/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"light",
								"update"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom light",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Light Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.state).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/light/delete/1001",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"light",
								"delete",
								"1001"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the response object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(light) {",
									"        pm.expect(light).to.be.an('object');",
									"        pm.expect(light.id).to.exist.and.to.be.a('number');",
									"        pm.expect(light.name).to.exist.and.to.be.a('string');",
									"        pm.expect(light.state).to.exist.and.to.be.a('boolean');",
									"        pm.expect(light.brightness).to.exist.and.to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify response attributes\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(light) {",
									"        pm.expect(light.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"ID should be a non-negative integer\");",
									"        pm.expect(light.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"        pm.expect(light.state).to.be.a('boolean');",
									"        pm.expect(light.brightness).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Brightness should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"State must be either true or false\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(light){",
									"        pm.expect(light.state).to.be.a('boolean');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/light/all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"light",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Thermostat",
			"item": [
				{
					"name": "Thermostat By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the thermostat object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(thermostat) {",
									"        pm.expect(thermostat).to.be.an('object');",
									"        pm.expect(thermostat.id).to.exist.and.to.be.a('number');",
									"        pm.expect(thermostat.name).to.exist.and.to.be.a('string');",
									"        pm.expect(thermostat.temperature).to.exist.and.to.be.a('number');",
									"        pm.expect(thermostat.mode).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(data) {",
									"        pm.expect(data.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Temperature is a number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(thermostat) {",
									"        pm.expect(thermostat.temperature).to.be.a('number');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/thermostat?name=Bedroom thermostat",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"thermostat"
							],
							"query": [
								{
									"key": "name",
									"value": "Bedroom thermostat"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Thermostat By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Response has the required fields - id, name, temperature, and mode', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.name).to.exist;",
									"    pm.expect(responseData.temperature).to.exist;",
									"    pm.expect(responseData.mode).to.exist;",
									"})",
									"",
									"pm.test('Temperature is within a valid range', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.temperature).to.be.a('number');",
									"    pm.expect(responseData.temperature).to.be.within(-100, 100);",
									"})",
									"",
									"pm.test('Mode is one of the expected values', function () {",
									"    const validModes = [",
									"        'HEATING',",
									"        'COOLING',",
									"        'OFF'",
									"    ];",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.mode).to.be.oneOf(validModes);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/thermostat/1002",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"thermostat",
								"1002"
							]
						}
					},
					"response": []
				},
				{
					"name": "Thermostat Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response has the required fields - id, name, temperature, and mode', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('temperature');",
									"    pm.expect(responseData).to.have.property('mode');",
									"})",
									"",
									"pm.test('Temperature is within a valid range', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.temperature).to.be.a('number');",
									"    pm.expect(responseData.temperature).to.be.at.least(-100);",
									"    pm.expect(responseData.temperature).to.be.at.most(100);",
									"})",
									"",
									"pm.test('Mode is one of the accepted values', function () {",
									"    const acceptedModes = [",
									"        'HEATING',",
									"        'COOLING',",
									"        'OFF'",
									"    ];",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.mode).to.be.oneOf(acceptedModes);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Kitchen thermostat\",\r\n    \"temperature\":26.3,\r\n    \"mode\":\"OFF\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/thermostat/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"thermostat",
								"add"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom thermostat",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Thermostat Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields - id, name, temperature, and mode', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('temperature');",
									"    pm.expect(responseData).to.have.property('mode');",
									"})",
									"",
									"pm.test('Temperature is a valid number', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.temperature).to.be.a('number');",
									"})",
									"",
									"pm.test('Name is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Name should not be empty');",
									"})",
									"",
									"pm.test('Mode is a valid mode (e.g. heat, cool, off)', function () {",
									"    const validModes = [",
									"        'HEATING',",
									"        'COOLING',",
									"        'OFF'",
									"    ];",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.mode).to.exist.and.to.be.oneOf(validModes);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1002,\r\n    \"name\":\"Bedroom thermostat\",\r\n    \"temperature\":26.3,\r\n    \"mode\":\"COOLING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/thermostat/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"thermostat",
								"update"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom thermostat",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Thermostat Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields - id, name, temperature, and mode', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('temperature');",
									"    pm.expect(responseData).to.have.property('mode');",
									"})",
									"",
									"pm.test('Name is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Name should not be empty');",
									"})",
									"",
									"pm.test('Temperature is a non-negative number', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.temperature).to.be.a('number');",
									"    pm.expect(responseData.temperature).to.be.at.least(0);",
									"})",
									"",
									"pm.test('Mode is a valid mode value', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.mode).to.be.oneOf([",
									"        'HEATING',",
									"        'COOLING',",
									"        'OFF'",
									"    ]);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/thermostat/delete/1003",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"thermostat",
								"delete",
								"1003"
							]
						}
					},
					"response": []
				},
				{
					"name": "Thermostats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the thermostat object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(thermostat) {",
									"        pm.expect(thermostat).to.have.property('id').that.is.a('number');",
									"        pm.expect(thermostat).to.have.property('name').that.is.a('string');",
									"        pm.expect(thermostat).to.have.property('temperature').that.is.a('number');",
									"        pm.expect(thermostat).to.have.property('mode').that.is.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(thermostat) {",
									"    pm.expect(thermostat.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Temperature is a number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(thermostat) {",
									"    pm.expect(thermostat.temperature).to.be.a('number');",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/thermostat/all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"thermostat",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Camera",
			"item": [
				{
					"name": "Camera By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(camera) {",
									"        pm.expect(camera.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(camera) {",
									"    pm.expect(camera.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"State and recording are boolean values\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  responseData.forEach(function(camera) {",
									"    pm.expect(camera.state).to.be.a('boolean');",
									"    pm.expect(camera.recording).to.be.a('boolean');",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/camera?name=Porch camera",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"camera"
							],
							"query": [
								{
									"key": "name",
									"value": "Porch camera"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Camera By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, state, and recording\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('name');",
									"  pm.expect(responseData).to.have.property('state');",
									"  pm.expect(responseData).to.have.property('recording');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.state).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Recording is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.recording).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/camera/1006",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"camera",
								"1006"
							]
						}
					},
					"response": []
				},
				{
					"name": "Camera Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, state, and recording\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('state');",
									"    pm.expect(responseData).to.have.property('recording');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State and recording are boolean values\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.state).to.be.a('boolean');",
									"  pm.expect(responseData.recording).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Balcony camera\",\r\n    \"state\":true,\r\n    \"recording\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/camera/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"camera",
								"add"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom camera",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Camera Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response object has the required fields - id, name, state, and recording\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('state');",
									"    pm.expect(responseData).to.have.property('recording');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State and recording are boolean values\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.state).to.be.a('boolean');",
									"  pm.expect(responseData.recording).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1006,\r\n    \"name\":\"Porch camera\",\r\n    \"state\":false,\r\n    \"recording\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/camera/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"camera",
								"update"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom camera",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Camera Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Presence of id, name, state, and recording fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('state');",
									"    pm.expect(responseData).to.have.property('recording');",
									"});",
									"",
									"",
									"pm.test(\"State and recording fields are boolean values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.state).to.be.a('boolean');",
									"    pm.expect(responseData.recording).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/camera/delete/1007",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"camera",
								"delete",
								"1007"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cameras",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields - id, name, state, and recording\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (camera) {",
									"        pm.expect(camera.id).to.exist;",
									"        pm.expect(camera.name).to.exist;",
									"        pm.expect(camera.state).to.exist;",
									"        pm.expect(camera.recording).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(camera) {",
									"    pm.expect(camera.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"State and recording should be boolean values\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(camera) {",
									"    pm.expect(camera.state).to.be.a('boolean');",
									"    pm.expect(camera.recording).to.be.a('boolean');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/camera/all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"camera",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Blinds",
			"item": [
				{
					"name": "Blinds By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, state, and position\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('state');",
									"        pm.expect(item).to.have.property('position');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(blind) {",
									"    pm.expect(blind.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(blind) {",
									"        pm.expect(blind.state).to.be.a('boolean');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Position is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(blind) {",
									"        pm.expect(blind.position).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/blinds?name=Bedroom blinds",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"blinds"
							],
							"query": [
								{
									"key": "name",
									"value": "Bedroom blinds"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Blinds By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, state, and position\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('state');",
									"    pm.expect(responseData).to.have.property('position');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.state).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Position is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.position).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.position).to.be.at.least(0, \"Position should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/blinds/1004",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"blinds",
								"1004"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blinds Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('name');",
									"  pm.expect(responseData).to.have.property('state');",
									"  pm.expect(responseData).to.have.property('position');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.state).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Position is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.position).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.position).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Living room blinds\",\r\n    \"state\":true,\r\n    \"position\":50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/blinds/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"blinds",
								"add"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom blinds",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Blinds Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.state).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1004,\r\n    \"name\":\"Porch blinds\",\r\n    \"state\":true,\r\n    \"brightness\":50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/blinds/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"blinds",
								"update"
							],
							"query": [
								{
									"key": "deviceName",
									"value": "Bedroom blinds",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Blinds Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Name should be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"State should be a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.state).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/blinds/delete/1005",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"blinds",
								"delete",
								"1005"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blinds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, state, and position\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('state');",
									"        pm.expect(item).to.have.property('position');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(blind) {",
									"    pm.expect(blind.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"State is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach((item) => {",
									"    pm.expect(item.state).to.be.a('boolean');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Position is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(blind) {",
									"    pm.expect(blind.position).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/blinds/all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"blinds",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields - id, name', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (device) {",
							"        pm.expect(device).to.have.property('id');",
							"        pm.expect(device).to.have.property('name');",
							"    });",
							"})",
							"",
							"pm.test('Name is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Name should not be empty');",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/device",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"device"
					],
					"query": [
						{
							"key": "param",
							"value": "bla",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}